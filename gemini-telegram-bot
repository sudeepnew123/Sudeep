import os
import logging
from flask import Flask, request
from threading import Thread
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
import google.generativeai as genai

# Load environment variables
BOT_TOKEN = os.environ.get("BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro")  # Updated model

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher(bot=bot, update_queue=None, use_context=True)


def get_ai_response(message: str) -> str:
    try:
        response = model.generate_content(message)
        return response.text.strip()
    except Exception as e:
        return f"AI Error: {e}"


def start(update: Update, context):
    update.message.reply_text("Hello! I am your Gemini AI bot.")


def help_command(update: Update, context):
    update.message.reply_text("Send any message and Iâ€™ll reply with AI.")


def handle_message(update: Update, context):
    user_msg = update.message.text
    ai_reply = get_ai_response(user_msg)
    update.message.reply_text(ai_reply)


def error_handler(update, context):
    logger.warning(f"Update {update} caused error {context.error}")


# Register handlers
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("help", help_command))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
dispatcher.add_error_handler(error_handler)


@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"


@app.route("/")
def index():
    return "Bot is running!"


def run():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))


if __name__ == "__main__":
    Thread(target=run).start()
