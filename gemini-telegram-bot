import os
import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from flask import Flask, request
import threading

# Logging setup
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Load secrets from environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Gemini response function
def get_ai_response(user_message: str) -> str:
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(user_message)
        return response.text
    except Exception as e:
        return f"AI Error: {e}"

# Bot command handlers
def start(update: Update, context: CallbackContext):
    update.message.reply_text('Hello! I am your Gemini-powered bot!')

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text('Just send any message and Iâ€™ll respond with AI.')

def handle_message(update: Update, context: CallbackContext):
    user_message = update.message.text
    ai_response = get_ai_response(user_message)
    update.message.reply_text(ai_response)

def error(update: Update, context: CallbackContext):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

# Run bot in background thread
def run_bot():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_error_handler(error)
    updater.start_polling()
    updater.idle()

# Flask app for Render health check
app = Flask(__name__)

@app.route('/')
def index():
    return 'Bot is running!'

# Start bot in separate thread when Flask runs
threading.Thread(target=run_bot).start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
